https://trello.com/invite/b/672d77158b1f6e2e7ba18298/ATTIf6d50f668d1f015a91e4664bd729a8250A1B54BA/team-meeting-group-13

our website : https://voluble-taffy-2748ab.netlify.app/

Fernando Cuba
https://trello.com/b/LaPOHMOU/team-meeting-group-13
https://trello.com/b/LaPOHMOU/team-meeting-group-13

Paul arcos at 11: 21  am  

requesting FA

hour now

pa 11:51 am 

VITE_SERVER_URL=http://server-nodejs.cit.byui.edu:3000/

This is the back repo 

check it out


my website is : https://ephemeral-truffle-92b7f8.netlify.app/

THIS IS FERNANDO CUBA

see my update one

My github: https://github.com/fercub496/backendC   

https://github.com/bejaranopol/Team13

import { loadHeaderFooter } from "./general.mjs";
import { createClient } from "@supabase/supabase-js";

loadHeaderFooter();

const supabaseUrl = "https://xpwvomfulwjlrcdcojyj.supabase.co";
const supabaseKey = "your_supabase_key";
const supabase = createClient(supabaseUrl, supabaseKey);

const savedRecipesDiv = document.getElementById("saved-recipes");

// Function to save a recipe for the logged-in user
async function saveRecipeForUser(recipe) {
  const user = supabase.auth.user();
  if (!user) {
    alert("You need to log in to save recipes!");
    return;
  }

  const { data, error } = await supabase
    .from("saved_recipes")
    .insert({
      user_id: user.id,
      label: recipe.label,
      url: recipe.url,
      image: recipe.image,
      calories: Math.round(recipe.calories),
    });

  if (error) {
    console.error("Error saving recipe:", error.message);
    alert("Failed to save recipe.");
  } else {
    console.log("Recipe saved:", data);
    alert("Recipe saved successfully!");
    fetchUserRecipes(); // Refresh the saved recipes list
  }
}

// Function to fetch and display saved recipes for the logged-in user
async function fetchUserRecipes() {
  const user = supabase.auth.user();
  if (!user) {
    savedRecipesDiv.innerHTML = "<p>Please log in to view your saved recipes.</p>";
    return;
  }

  const { data: recipes, error } = await supabase
    .from("saved_recipes")
    .select("*")
    .eq("user_id", user.id);

  if (error) {
    console.error("Error fetching recipes:", error.message);
    savedRecipesDiv.innerHTML = "<p>Failed to load recipes. Please try again later.</p>";
    return;
  }

  displaySavedRecipes(recipes);
}

// Function to display saved recipes
function displaySavedRecipes(recipes) {
  savedRecipesDiv.innerHTML = "<h2>Saved Recipes</h2>";

  if (recipes.length === 0) {
    savedRecipesDiv.innerHTML += "<p>No saved recipes.</p>";
    return;
  }

  recipes.forEach((recipe) => {
    const recipeDiv = document.createElement("div");
    recipeDiv.classList.add("saved-recipe");

    recipeDiv.innerHTML = `
      <h3>${recipe.label}</h3>
      <img src="${recipe.image}" alt="${recipe.label}">
      <p><strong>Calories:</strong> ${recipe.calories}</p>
      <a href="${recipe.url}" target="_blank">View Recipe</a>
      <button class="delete-btn" data-id="${recipe.id}">Delete</button>
    `;

    const deleteButton = recipeDiv.querySelector(".delete-btn");
    deleteButton.addEventListener("click", () => deleteRecipe(recipe.id));

    savedRecipesDiv.appendChild(recipeDiv);
  });
}

// Function to delete a saved recipe
async function deleteRecipe(recipeId) {
  const { error } = await supabase.from("saved_recipes").delete().eq("id", recipeId);

  if (error) {
    console.error("Error deleting recipe:", error.message);
    alert("Failed to delete recipe.");
  } else {
    alert("Recipe deleted successfully!");
    fetchUserRecipes(); // Refresh the saved recipes list
  }
}

// Display saved recipes on page load
fetchUserRecipes();